basePath: /api/v1
definitions:
  adapter.Peer:
    properties:
      ip_addrs:
        items:
          type: any
        type: array
      peer_id:
        $ref: '#/definitions/adapter.PeerID'
      services:
        items:
          $ref: '#/definitions/adapter.Service'
        type: array
      timestamp:
        type: integer
    type: object
  adapter.PeerID:
    properties:
      _address:
        items:
          type: any
        type: array
      allow_cardano:
        type: string
      has_gpu:
        type: string
      key:
        type: string
      mid:
        type: string
      nodeID:
        type: string
      public_key:
        type: string
    type: object
  adapter.Service:
    properties:
      price:
        type: integer
      service_input:
        type: string
      service_output:
        type: string
    type: object
  models.AddressPrivKey:
    properties:
      address:
        type: string
      private_key:
        type: string
    type: object
  models.Metadata:
    properties:
      available:
        properties:
          ram:
            type: integer
          update_timestamp:
            type: integer
        type: object
      name:
        type: string
      network:
        type: string
      public_key:
        type: string
      reserved:
        properties:
          cpu:
            type: integer
          memory:
            type: integer
        type: object
      resource:
        properties:
          cpu_max:
            type: number
          cpu_usage:
            type: number
          ram_max:
            type: integer
          total_core:
            type: integer
          update_timestamp:
            type: integer
        type: object
    type: object
  models.Provisioned:
    properties:
      cpu:
        type: number
      memory:
        type: integer
      total_cores:
        type: integer
    type: object
host: localhost:9999
info:
  contact:
    email: support@nunet.io
    name: Support
    url: https://devexchange.nunet.io/
  description: A dashboard application for computing providers.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://nunet.io/tos
  title: Device Management Service
  version: 0.3.1
paths:
  /gpu/deploy/:nodeID:
    post:
      description: Sends deployment request message to one of the peer on the message
        exchange. Request include details such as docker image name, capacity required
        etc.
      produces:
      - application/json
      responses:
        "200":
          description: sent
          schema:
            type: string
      summary: Send deployment request to one of the peer.
      tags:
      - gpu
  /gpu/deploy/receive:
    get:
      description: 'Receives the deployment message from the message exchange. And
        do following docker based actions in the sequence: Pull image, rnu container,
        get logs, delete container, delete image, send log to the requester.'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Receive the deployment message and do the needful.
      tags:
      - gpu
  /gpu/devices:
    get:
      description: SearchDevice searches the DHT for non-busy, available devices with
        "has_gpu" metadata. Search results returns a list of available devices along
        with the resource capacity.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/adapter.Peer'
            type: array
      summary: Search devices on DHT with has_gpu attribute set..
      tags:
      - gpu
  /onboarding/address/new:
    get:
      description: Create a payment address from public key. Return payment address
        and private key.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.AddressPrivKey'
      summary: Create a new payment address.
      tags:
      - onboarding
  /onboarding/metadata:
    get:
      description: Responds with metadata of current provideer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Metadata'
            type: array
      summary: Get current device info.
      tags:
      - onboarding
  /onboarding/onboard:
    post:
      description: Onboard runs onboarding script given the amount of resources to
        onboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Metadata'
            type: array
      summary: Runs the onboarding process.
      tags:
      - onboarding
  /onboarding/provisioned:
    get:
      description: Get total memory capacity in MB and CPU capacity in MHz.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Provisioned'
      summary: Returns provisioned capacity on host.
      tags:
      - onboarding
  /spo/deploy/:nodeID:
    post:
      description: Sends deployment request message to one of the peer on the message
        exchange.
      produces:
      - application/json
      responses:
        "200":
          description: sent
          schema:
            type: string
      summary: Send deployment request to one of the peer.
      tags:
      - spo
  /spo/devices:
    get:
      description: SearchDevice searches the DHT for non-busy, available devices with
        "allow_cardano" metadata. Search results returns a list of available devices
        along with the resource capacity.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/adapter.Peer'
            type: array
      summary: Search devices on DHT with has_gpu attribute set..
      tags:
      - spo
  /vm/boot-source/:vmID:
    put:
      description: Configure kernel for the VM.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Configures kernel for the VM.
      tags:
      - vm
  /vm/drives/:vmID:
    put:
      description: Configures filesystem for the VM.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Configures filesystem for the VM.
      tags:
      - vm
  /vm/init/:vmID:
    post:
      description: Starts the firecracker server for the specific VM. Further configuration
        are required.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Starts the VM booting process.
      tags:
      - vm
  /vm/machine-config/:vmID:
    put:
      description: Configures system spec for the VM like CPU and Memory.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Configures system spec for the VM.
      tags:
      - vm
  /vm/network-interface/:vmID:
    put:
      description: Configures network interface on the host.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Configures network interface on the host.
      tags:
      - vm
  /vm/start-custom:
    post:
      description: This endpoint is an abstraction of all primitive endpoints. When
        invokend, it calls all primitive endpoints in a sequence.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Start a VM with custom configuration.
      tags:
      - vm
  /vm/start-default:
    post:
      description: This endpoint is an abstraction of all other endpoints. When invokend,
        it calls all other endpoints in a sequence.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Start a VM with default configuration.
      tags:
      - vm
  /vm/start/:vmID:
    post:
      description: Start the VM.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Start the VM.
      tags:
      - vm
  /vm/stop/:vmID:
    post:
      description: Stop the VM.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Stop the VM.
      tags:
      - vm
swagger: "2.0"
