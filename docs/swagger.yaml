basePath: /api/v1
definitions:
  machines.fundingRespToSPD:
    properties:
      compute_provider_addr:
        type: string
      distribute_hash:
        type: string
      estimated_price:
        type: number
      metadata_hash:
        type: string
      refund_hash:
        type: string
      withdraw_hash:
        type: string
    type: object
  models.BlockchainAddressPrivKey:
    properties:
      address:
        type: string
      mnemonic:
        type: string
      private_key:
        type: string
    type: object
  models.BlockchainTxStatus:
    properties:
      transaction_status:
        type: string
      transaction_type:
        type: string
      tx_hash:
        type: string
    type: object
  models.DeploymentRequest:
    properties:
      address_user:
        description: service provider wallet address
        type: string
      blockchain:
        type: string
      constraints:
        properties:
          complexity:
            type: string
          cpu:
            type: integer
          power:
            type: integer
          ram:
            type: integer
          time:
            type: integer
          vram:
            type: integer
        type: object
      distribute_hash:
        type: string
      estimated_ntx:
        type: number
      max_ntx:
        type: integer
      metadata_hash:
        type: string
      params:
        properties:
          image_id:
            type: string
          local_node_id:
            description: NodeID of service provider (machine triggering the job)
            type: string
          local_public_key:
            description: Public key of service provider
            type: string
          machine_type:
            type: string
          model_url:
            type: string
          node_id:
            description: NodeID of compute provider (machine to deploy the job on)
            type: string
          packages:
            items:
              type: string
            type: array
          public_key:
            description: Public key of compute provider
            type: string
        type: object
      refund_hash:
        type: string
      service_type:
        type: string
      timestamp:
        type: string
      traceinfo:
        properties:
          span_id:
            type: string
          trace_flags:
            type: string
          trace_id:
            type: string
          trace_state:
            type: string
        type: object
      tx_hash:
        type: string
      withdraw_hash:
        type: string
    type: object
  models.Metadata:
    properties:
      available:
        properties:
          ram:
            type: integer
          update_timestamp:
            type: integer
        type: object
      name:
        type: string
      network:
        type: string
      public_key:
        type: string
      reserved:
        properties:
          cpu:
            type: integer
          memory:
            type: integer
        type: object
      resource:
        properties:
          cpu_max:
            type: number
          cpu_usage:
            type: number
          ram_max:
            type: integer
          total_core:
            type: integer
          update_timestamp:
            type: integer
        type: object
    type: object
  models.OnboardingStatus:
    properties:
      database_path:
        type: string
      error:
        type: string
      machine_uuid:
        type: string
      metadata_path:
        type: string
      onboarded:
        type: boolean
    type: object
  models.Provisioned:
    properties:
      cpu:
        type: number
      memory:
        type: integer
      total_cores:
        type: integer
    type: object
  tokenomics.ClaimCardanoTokenBody:
    properties:
      compute_provider_address:
        type: string
      tx_hash:
        type: string
    type: object
  tokenomics.TxHashResp:
    properties:
      date_time:
        type: string
      tx_hash:
        type: string
    type: object
  tokenomics.rewardRespToCPD:
    properties:
      action:
        type: string
      datum:
        type: string
      message_hash_action:
        type: string
      message_hash_datum:
        type: string
      reward_type:
        type: string
      signature_action:
        type: string
      signature_datum:
        type: string
    type: object
host: localhost:9999
info:
  contact:
    email: support@nunet.io
    name: Support
    url: https://devexchange.nunet.io/
  description: A dashboard application for computing providers.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://nunet.io/tos
  title: Device Management Service
  version: 0.4.127
paths:
  /dht:
    get:
      description: Returns entire DHT content
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Return a dump of the dht
      tags:
      - p2p
  /onboarding/address/new:
    get:
      description: Create a payment address from public key. Return payment address
        and private key.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.BlockchainAddressPrivKey'
      summary: Create a new payment address.
      tags:
      - onboarding
  /onboarding/metadata:
    get:
      description: Responds with metadata of current provideer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
      summary: Get current device info.
      tags:
      - onboarding
  /onboarding/offboard:
    delete:
      description: Offboard runs the offboarding script to remove resources associated
        with a device.
      responses:
        "200":
          description: Successfully Onboarded
      summary: Runs the offboarding process.
      tags:
      - onboarding
  /onboarding/onboard:
    post:
      description: Onboard runs onboarding script given the amount of resources to
        onboard.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
      summary: Runs the onboarding process.
      tags:
      - onboarding
  /onboarding/provisioned:
    get:
      description: Get total memory capacity in MB and CPU capacity in MHz.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Provisioned'
      summary: Returns provisioned capacity on host.
      tags:
      - onboarding
  /onboarding/resource-config:
    post:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
      summary: changes the amount of resources of onboarded device .
      tags:
      - onboarding
  /onboarding/status:
    get:
      description: 'Returns json with 5 parameters: onboarded, error, machine_uuid,
        metadata_path, database_path.'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.OnboardingStatus'
      summary: Onboarding status and other metadata.
      tags:
      - onboarding
  /peers:
    get:
      description: Gets a list of peers the libp2p node can see within the network
        and return a list of peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Return list of peers currently connected to
      tags:
      - p2p
  /peers/chat:
    get:
      description: Get a list of chat requests from peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: List chat requests
      tags:
      - chat
  /peers/chat/clear:
    get:
      description: Clear chat request streams from peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Clear chat requests
      tags:
      - chat
  /peers/chat/join:
    get:
      description: Join a chat session started by a peer
      responses:
        "200":
          description: OK
      summary: Join chat with a peer
      tags:
      - chat
  /peers/chat/start:
    get:
      description: Start chat session with a peer
      responses:
        "200":
          description: OK
      summary: Start chat with a peer
      tags:
      - chat
  /peers/depreq:
    get:
      description: |-
        Set peer as the default receipient of deployment requests by setting the peerID parameter on GET request.
        Show peer set as default deployment request receiver by sending a GET request without any parameters.
        Remove default deployment request receiver by sending a GET request with peerID parameter set to '0'.
      responses:
        "200":
          description: OK
      summary: Manage default deplyment request receiver peer
      tags:
      - peers
  /peers/dht:
    get:
      description: Gets a list of peers the libp2p node has received a dht update
        from
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Return list of peers which have sent a dht update
      tags:
      - p2p
  /peers/file:
    get:
      description: Get a list of file transfer requests from peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: List file transfer requests
      tags:
      - file
  /peers/file/accept:
    get:
      description: Accept an incoming file transfer. Incoming file transfre stream
        id is a required parameter.
      responses:
        "200":
          description: OK
      summary: Accept incoming file transfer
      tags:
      - file
  /peers/file/clear:
    get:
      description: Clear file transfer request streams from peers
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Clear file transfer requests
      tags:
      - file
  /peers/file/send:
    get:
      description: Initiate file transfer to a peer. filePath and peerID are required
        arguments.
      responses:
        "200":
          description: OK
      summary: Send a file to a peer
      tags:
      - file
  /peers/kad-dht:
    get:
      description: Gets a list of peers the libp2p node has received a dht update
        from
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Return list of peers which have sent a dht update
      tags:
      - p2p
  /peers/self:
    get:
      description: Gets self peer info of libp2p node
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Return self peer info
      tags:
      - p2p
  /peers/ws:
    get:
      description: Sends a command to specific node and prints back response.
      responses:
        "200":
          description: OK
      summary: Sends a command to specific node and prints back response.
      tags:
      - peers
  /run/deploy:
    get:
      description: Loads deployment request from the DB after a successful blockchain
        transaction has been made and passes it to compute provider.
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Websocket endpoint responsible for sending deployment request and receiving
        deployment response.
      tags:
      - run
  /run/request-service:
    post:
      description: HandleRequestService searches the DHT for non-busy, available devices
        with appropriate metadata. Then informs parameters related to blockchain to
        request to run a service on NuNet.
      parameters:
      - description: Deployment Request
        in: body
        name: deployment_request
        required: true
        schema:
          $ref: '#/definitions/models.DeploymentRequest'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/machines.fundingRespToSPD'
      summary: Informs parameters related to blockchain to request to run a service
        on NuNet
      tags:
      - run
  /telemetry/free:
    get:
      description: Checks and returns the amount of free resources available
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Returns the amount of free resources available
      tags:
      - telemetry
  /transactions:
    get:
      description: Get list of TxHashes along with the date and time of jobs done.
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokenomics.TxHashResp'
      summary: Get list of TxHashes for jobs done.
      tags:
      - run
  /transactions/request-reward:
    post:
      description: HandleRequestReward takes request from the compute provider, talks
        with Oracle and releases tokens if conditions are met.
      parameters:
      - description: Claim Reward Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/tokenomics.ClaimCardanoTokenBody'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/tokenomics.rewardRespToCPD'
      summary: Get NTX tokens for work done.
      tags:
      - run
  /transactions/send-status:
    post:
      description: HandleSendStatus is used by webapps to send status of blockchain
        activities. Such token withdrawl.
      parameters:
      - description: Blockchain Transaction Status Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.BlockchainTxStatus'
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Sends blockchain status of contract creation.
      tags:
      - run
  /vm/start-custom:
    post:
      description: This endpoint is an abstraction of all primitive endpoints. When
        invokend, it calls all primitive endpoints in a sequence.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Start a VM with custom configuration.
      tags:
      - vm
  /vm/start-default:
    post:
      description: Everything except kernel files and filesystem file will be set
        by DMS itself.
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Start a VM with default configuration.
      tags:
      - vm
swagger: "2.0"
