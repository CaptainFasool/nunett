package storage

import (
	"time"

	"gitlab.com/nunet/device-management-service/models"
)

type IDType int
type VolumeSource string
type CreateVolOpt func(*StorageVolume)
type LockVolOpt func(*StorageVolume)

const (
	IDTypeUndefined IDType = iota
	IDTypePath
	IDTypeCID
)

const (
	VolumeSourceUndefined VolumeSource = "volume-source-undefined"
	VolumeSourceS3        VolumeSource = "s3"
	VolumeSourceIPFS      VolumeSource = "ipfs"
	VolumeSourceJob       VolumeSource = "job" // when data is generated by a job
)

// VolumeController is used to manage storage volumes.
//
// TODO-maybe: is the interface too big? We may have to split it?
type VolumeController interface {
	// CreateVolume creates a directory where data can be stored, and returns a StorageVolume
	// which contains the path to the directory.
	//
	// Be aware: CreateVolume does not insert any data within the directory. It's up to the caller
	// to do that.
	CreateVolume(volSource VolumeSource, opts ...CreateVolOpt) (StorageVolume, error)

	// LockVolume makes the volume read-only. It should be used after all necessary data has being written
	// to the volume. It makes clear if a volume will change state or not,that comes handy when we need
	// to retrieve volume's CID which is immutable given a certain data.
	//
	// One of the opts may be a CID. Or the implementation might handle the CID calculation
	//
	// TODO-maybe: after volume is locked, callers should not be able to write data to it.
	LockVolume(pathToVol string, opts ...LockVolOpt) error

	// DeleteVolume deletes everything within the volume's root directory.
	// Input can be either a path or a CID.
	DeleteVolume(identifier string, idType IDType) error

	// ListVolumes returns a list of all storage volumes managed by the VolumeController implementation
	ListVolumes() ([]StorageVolume, error)

	// GetSize returns the size of a volume
	// TODO-minor: identify which measurement type will be used
	GetSize(identifier string, idType IDType) (int64, error)

	// TODO-maybe: encrypt/decrypt method might move to an unique EncryptVolume/DecryptVolume interfaces
	// or something else.
	//  - Warning: if moved, EncryptionType field of StorageVolume must be updated somehow by the new interface
	EncryptVolume(path string, encryptor models.Encryptor, encryptionType models.EncryptionType) error
	DecryptVolume(path string, decryptor models.Decryptor, decryptionType models.EncryptionType) error
}

// StorageVolume contains the location (FS path) of a directory where certain data may be stored
// and metadata about the volume itself + data (if any).
//
// Be aware that StorageVolume might not contain any data within it, specially when it's just
// created using the VolumeController, there will be no data in it by default.
//
// TODO-maybe [job]: should volumes be related to a job or []job?
//
// TODO-maybe: most of the fields should be private, callers shouldn't be able to altere
// the state of the volume except when using certain methods
type StorageVolume struct {
	// CID is the content identifier of the storage volume.
	//
	// Warning: CID must be updated ONLY when locking volume (aka when volume was
	// is set to read-only)
	//
	// Be aware: Before relying on data's CID, be aware that it might be encrypted (
	// EncryptionType might be checked first if needed)
	//
	// TODO-maybe [type]: maybe it should be of type cid.CID
	CID string

	// Path points to the root of a DIRECTORY where data may be stored.
	Path string

	// ReadOnly indicates whether the storage volume is read-only or not.
	ReadOnly bool

	// Size is the size of the storage volume
	//
	// TODO-maybe: if relying on a size field, we would have to be more careful
	// how state is being mutated (and they shouldn't be by the caller)
	//  - Size might be calculated only when locking the volume also
	//
	// Size int64

	// Private indicates whether the storage volume is private or not.
	// If it's private, it shouldn't be shared with other nodes and it shouldn't
	// be persisted after the job is finished.
	// Practical application: if private, peer maintaining it shouldn't publish
	// its CID as if it was available to be worked on by other jobs.
	Private bool

	// EncryptionType indicates the type of encryption used for the storage volume.
	// In case no encryption is used, the value will be EncryptionTypeNull
	EncryptionType models.EncryptionType

	// CreatedAt represents the creation timestamp of the storage volume
	CreatedAt time.Time

	// UpdatedAt represents the last update timestamp of the storage volume
	UpdatedAt time.Time
}
