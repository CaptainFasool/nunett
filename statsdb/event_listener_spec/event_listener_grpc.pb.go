// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: event_listener.proto

package event_listener_spec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventListenerClient is the client API for EventListener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventListenerClient interface {
	// New Procedures
	NewDeviceOnboarded(ctx context.Context, in *NewDeviceOnboardedInput, opts ...grpc.CallOption) (*NewDeviceOnboardedOutput, error)
	DeviceStatusChange(ctx context.Context, in *DeviceStatusChangeInput, opts ...grpc.CallOption) (*DeviceStatusChangeOutput, error)
	DeviceResourceChange(ctx context.Context, in *DeviceResourceChangeInput, opts ...grpc.CallOption) (*DeviceResourceChangeOutput, error)
	DeviceResourceConfig(ctx context.Context, in *DeviceResourceConfigInput, opts ...grpc.CallOption) (*DeviceResourceConfigOutput, error)
	NewService(ctx context.Context, in *NewServiceInput, opts ...grpc.CallOption) (*NewServiceOutput, error)
	ServiceCall(ctx context.Context, in *ServiceCallInput, opts ...grpc.CallOption) (*ServiceCallOutput, error)
	ServiceStatus(ctx context.Context, in *ServiceStatusInput, opts ...grpc.CallOption) (*ServiceStatusOutput, error)
	ServiceRemove(ctx context.Context, in *ServiceRemoveInput, opts ...grpc.CallOption) (*ServiceRemoveOutput, error)
	NtxPayment(ctx context.Context, in *NtxPaymentInput, opts ...grpc.CallOption) (*NtxPaymentOutput, error)
	HeartBeat(ctx context.Context, in *HeartBeatInput, opts ...grpc.CallOption) (*HeartBeatOutput, error)
}

type eventListenerClient struct {
	cc grpc.ClientConnInterface
}

func NewEventListenerClient(cc grpc.ClientConnInterface) EventListenerClient {
	return &eventListenerClient{cc}
}

func (c *eventListenerClient) NewDeviceOnboarded(ctx context.Context, in *NewDeviceOnboardedInput, opts ...grpc.CallOption) (*NewDeviceOnboardedOutput, error) {
	out := new(NewDeviceOnboardedOutput)
	err := c.cc.Invoke(ctx, "/EventListener/new_device_onboarded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) DeviceStatusChange(ctx context.Context, in *DeviceStatusChangeInput, opts ...grpc.CallOption) (*DeviceStatusChangeOutput, error) {
	out := new(DeviceStatusChangeOutput)
	err := c.cc.Invoke(ctx, "/EventListener/device_status_change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) DeviceResourceChange(ctx context.Context, in *DeviceResourceChangeInput, opts ...grpc.CallOption) (*DeviceResourceChangeOutput, error) {
	out := new(DeviceResourceChangeOutput)
	err := c.cc.Invoke(ctx, "/EventListener/device_resource_change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) DeviceResourceConfig(ctx context.Context, in *DeviceResourceConfigInput, opts ...grpc.CallOption) (*DeviceResourceConfigOutput, error) {
	out := new(DeviceResourceConfigOutput)
	err := c.cc.Invoke(ctx, "/EventListener/device_resource_config", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) NewService(ctx context.Context, in *NewServiceInput, opts ...grpc.CallOption) (*NewServiceOutput, error) {
	out := new(NewServiceOutput)
	err := c.cc.Invoke(ctx, "/EventListener/new_service", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) ServiceCall(ctx context.Context, in *ServiceCallInput, opts ...grpc.CallOption) (*ServiceCallOutput, error) {
	out := new(ServiceCallOutput)
	err := c.cc.Invoke(ctx, "/EventListener/service_call", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) ServiceStatus(ctx context.Context, in *ServiceStatusInput, opts ...grpc.CallOption) (*ServiceStatusOutput, error) {
	out := new(ServiceStatusOutput)
	err := c.cc.Invoke(ctx, "/EventListener/service_status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) ServiceRemove(ctx context.Context, in *ServiceRemoveInput, opts ...grpc.CallOption) (*ServiceRemoveOutput, error) {
	out := new(ServiceRemoveOutput)
	err := c.cc.Invoke(ctx, "/EventListener/service_remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) NtxPayment(ctx context.Context, in *NtxPaymentInput, opts ...grpc.CallOption) (*NtxPaymentOutput, error) {
	out := new(NtxPaymentOutput)
	err := c.cc.Invoke(ctx, "/EventListener/ntx_payment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventListenerClient) HeartBeat(ctx context.Context, in *HeartBeatInput, opts ...grpc.CallOption) (*HeartBeatOutput, error) {
	out := new(HeartBeatOutput)
	err := c.cc.Invoke(ctx, "/EventListener/heart_beat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventListenerServer is the server API for EventListener service.
// All implementations must embed UnimplementedEventListenerServer
// for forward compatibility
type EventListenerServer interface {
	// New Procedures
	NewDeviceOnboarded(context.Context, *NewDeviceOnboardedInput) (*NewDeviceOnboardedOutput, error)
	DeviceStatusChange(context.Context, *DeviceStatusChangeInput) (*DeviceStatusChangeOutput, error)
	DeviceResourceChange(context.Context, *DeviceResourceChangeInput) (*DeviceResourceChangeOutput, error)
	DeviceResourceConfig(context.Context, *DeviceResourceConfigInput) (*DeviceResourceConfigOutput, error)
	NewService(context.Context, *NewServiceInput) (*NewServiceOutput, error)
	ServiceCall(context.Context, *ServiceCallInput) (*ServiceCallOutput, error)
	ServiceStatus(context.Context, *ServiceStatusInput) (*ServiceStatusOutput, error)
	ServiceRemove(context.Context, *ServiceRemoveInput) (*ServiceRemoveOutput, error)
	NtxPayment(context.Context, *NtxPaymentInput) (*NtxPaymentOutput, error)
	HeartBeat(context.Context, *HeartBeatInput) (*HeartBeatOutput, error)
	mustEmbedUnimplementedEventListenerServer()
}

// UnimplementedEventListenerServer must be embedded to have forward compatible implementations.
type UnimplementedEventListenerServer struct {
}

func (UnimplementedEventListenerServer) NewDeviceOnboarded(context.Context, *NewDeviceOnboardedInput) (*NewDeviceOnboardedOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewDeviceOnboarded not implemented")
}
func (UnimplementedEventListenerServer) DeviceStatusChange(context.Context, *DeviceStatusChangeInput) (*DeviceStatusChangeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceStatusChange not implemented")
}
func (UnimplementedEventListenerServer) DeviceResourceChange(context.Context, *DeviceResourceChangeInput) (*DeviceResourceChangeOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceResourceChange not implemented")
}
func (UnimplementedEventListenerServer) DeviceResourceConfig(context.Context, *DeviceResourceConfigInput) (*DeviceResourceConfigOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeviceResourceConfig not implemented")
}
func (UnimplementedEventListenerServer) NewService(context.Context, *NewServiceInput) (*NewServiceOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewService not implemented")
}
func (UnimplementedEventListenerServer) ServiceCall(context.Context, *ServiceCallInput) (*ServiceCallOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceCall not implemented")
}
func (UnimplementedEventListenerServer) ServiceStatus(context.Context, *ServiceStatusInput) (*ServiceStatusOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceStatus not implemented")
}
func (UnimplementedEventListenerServer) ServiceRemove(context.Context, *ServiceRemoveInput) (*ServiceRemoveOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRemove not implemented")
}
func (UnimplementedEventListenerServer) NtxPayment(context.Context, *NtxPaymentInput) (*NtxPaymentOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NtxPayment not implemented")
}
func (UnimplementedEventListenerServer) HeartBeat(context.Context, *HeartBeatInput) (*HeartBeatOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartBeat not implemented")
}
func (UnimplementedEventListenerServer) mustEmbedUnimplementedEventListenerServer() {}

// UnsafeEventListenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventListenerServer will
// result in compilation errors.
type UnsafeEventListenerServer interface {
	mustEmbedUnimplementedEventListenerServer()
}

func RegisterEventListenerServer(s grpc.ServiceRegistrar, srv EventListenerServer) {
	s.RegisterService(&EventListener_ServiceDesc, srv)
}

func _EventListener_NewDeviceOnboarded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewDeviceOnboardedInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).NewDeviceOnboarded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/new_device_onboarded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).NewDeviceOnboarded(ctx, req.(*NewDeviceOnboardedInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_DeviceStatusChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceStatusChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).DeviceStatusChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/device_status_change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).DeviceStatusChange(ctx, req.(*DeviceStatusChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_DeviceResourceChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceResourceChangeInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).DeviceResourceChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/device_resource_change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).DeviceResourceChange(ctx, req.(*DeviceResourceChangeInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_DeviceResourceConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceResourceConfigInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).DeviceResourceConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/device_resource_config",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).DeviceResourceConfig(ctx, req.(*DeviceResourceConfigInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_NewService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewServiceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).NewService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/new_service",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).NewService(ctx, req.(*NewServiceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_ServiceCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceCallInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).ServiceCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/service_call",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).ServiceCall(ctx, req.(*ServiceCallInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_ServiceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceStatusInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).ServiceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/service_status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).ServiceStatus(ctx, req.(*ServiceStatusInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_ServiceRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceRemoveInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).ServiceRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/service_remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).ServiceRemove(ctx, req.(*ServiceRemoveInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_NtxPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NtxPaymentInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).NtxPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/ntx_payment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).NtxPayment(ctx, req.(*NtxPaymentInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventListener_HeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartBeatInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventListenerServer).HeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventListener/heart_beat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventListenerServer).HeartBeat(ctx, req.(*HeartBeatInput))
	}
	return interceptor(ctx, in, info, handler)
}

// EventListener_ServiceDesc is the grpc.ServiceDesc for EventListener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventListener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventListener",
	HandlerType: (*EventListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "new_device_onboarded",
			Handler:    _EventListener_NewDeviceOnboarded_Handler,
		},
		{
			MethodName: "device_status_change",
			Handler:    _EventListener_DeviceStatusChange_Handler,
		},
		{
			MethodName: "device_resource_change",
			Handler:    _EventListener_DeviceResourceChange_Handler,
		},
		{
			MethodName: "device_resource_config",
			Handler:    _EventListener_DeviceResourceConfig_Handler,
		},
		{
			MethodName: "new_service",
			Handler:    _EventListener_NewService_Handler,
		},
		{
			MethodName: "service_call",
			Handler:    _EventListener_ServiceCall_Handler,
		},
		{
			MethodName: "service_status",
			Handler:    _EventListener_ServiceStatus_Handler,
		},
		{
			MethodName: "service_remove",
			Handler:    _EventListener_ServiceRemove_Handler,
		},
		{
			MethodName: "ntx_payment",
			Handler:    _EventListener_NtxPayment_Handler,
		},
		{
			MethodName: "heart_beat",
			Handler:    _EventListener_HeartBeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event_listener.proto",
}
