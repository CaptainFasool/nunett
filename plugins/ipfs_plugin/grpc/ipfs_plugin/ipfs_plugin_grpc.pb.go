// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: integrations/specs/compute-api-spec/ipfs_plugin.proto

package ipfs_plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPFSPluginClient is the client API for IPFSPlugin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPFSPluginClient interface {
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error)
}

type iPFSPluginClient struct {
	cc grpc.ClientConnInterface
}

func NewIPFSPluginClient(cc grpc.ClientConnInterface) IPFSPluginClient {
	return &iPFSPluginClient{cc}
}

func (c *iPFSPluginClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResponse, error) {
	out := new(StoreResponse)
	err := c.cc.Invoke(ctx, "/ipfs_plugin.IPFSPlugin/Store", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPFSPluginServer is the server API for IPFSPlugin service.
// All implementations must embed UnimplementedIPFSPluginServer
// for forward compatibility
type IPFSPluginServer interface {
	Store(context.Context, *StoreRequest) (*StoreResponse, error)
	mustEmbedUnimplementedIPFSPluginServer()
}

// UnimplementedIPFSPluginServer must be embedded to have forward compatible implementations.
type UnimplementedIPFSPluginServer struct {
}

func (UnimplementedIPFSPluginServer) Store(context.Context, *StoreRequest) (*StoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedIPFSPluginServer) mustEmbedUnimplementedIPFSPluginServer() {}

// UnsafeIPFSPluginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPFSPluginServer will
// result in compilation errors.
type UnsafeIPFSPluginServer interface {
	mustEmbedUnimplementedIPFSPluginServer()
}

func RegisterIPFSPluginServer(s grpc.ServiceRegistrar, srv IPFSPluginServer) {
	s.RegisterService(&IPFSPlugin_ServiceDesc, srv)
}

func _IPFSPlugin_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFSPluginServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_plugin.IPFSPlugin/Store",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFSPluginServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPFSPlugin_ServiceDesc is the grpc.ServiceDesc for IPFSPlugin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPFSPlugin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipfs_plugin.IPFSPlugin",
	HandlerType: (*IPFSPluginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Store",
			Handler:    _IPFSPlugin_Store_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/specs/compute-api-spec/ipfs_plugin.proto",
}
