// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: integrations/specs/data-persistence-api-spec/ipfs_plugin.proto

package ipfs_plugin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IPFSClient is the client API for IPFS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IPFSClient interface {
	StoreOutput(ctx context.Context, in *StoreOutputRequest, opts ...grpc.CallOption) (*StoreOutputResponse, error)
	PinByCID(ctx context.Context, in *PinByCIDRequest, opts ...grpc.CallOption) (*PinByCIDResponse, error)
}

type iPFSClient struct {
	cc grpc.ClientConnInterface
}

func NewIPFSClient(cc grpc.ClientConnInterface) IPFSClient {
	return &iPFSClient{cc}
}

func (c *iPFSClient) StoreOutput(ctx context.Context, in *StoreOutputRequest, opts ...grpc.CallOption) (*StoreOutputResponse, error) {
	out := new(StoreOutputResponse)
	err := c.cc.Invoke(ctx, "/ipfs_plugin.IPFS/StoreOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *iPFSClient) PinByCID(ctx context.Context, in *PinByCIDRequest, opts ...grpc.CallOption) (*PinByCIDResponse, error) {
	out := new(PinByCIDResponse)
	err := c.cc.Invoke(ctx, "/ipfs_plugin.IPFS/PinByCID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPFSServer is the server API for IPFS service.
// All implementations must embed UnimplementedIPFSServer
// for forward compatibility
type IPFSServer interface {
	StoreOutput(context.Context, *StoreOutputRequest) (*StoreOutputResponse, error)
	PinByCID(context.Context, *PinByCIDRequest) (*PinByCIDResponse, error)
	mustEmbedUnimplementedIPFSServer()
}

// UnimplementedIPFSServer must be embedded to have forward compatible implementations.
type UnimplementedIPFSServer struct {
}

func (UnimplementedIPFSServer) StoreOutput(context.Context, *StoreOutputRequest) (*StoreOutputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreOutput not implemented")
}
func (UnimplementedIPFSServer) PinByCID(context.Context, *PinByCIDRequest) (*PinByCIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PinByCID not implemented")
}
func (UnimplementedIPFSServer) mustEmbedUnimplementedIPFSServer() {}

// UnsafeIPFSServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IPFSServer will
// result in compilation errors.
type UnsafeIPFSServer interface {
	mustEmbedUnimplementedIPFSServer()
}

func RegisterIPFSServer(s grpc.ServiceRegistrar, srv IPFSServer) {
	s.RegisterService(&IPFS_ServiceDesc, srv)
}

func _IPFS_StoreOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreOutputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFSServer).StoreOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_plugin.IPFS/StoreOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFSServer).StoreOutput(ctx, req.(*StoreOutputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IPFS_PinByCID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PinByCIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPFSServer).PinByCID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ipfs_plugin.IPFS/PinByCID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPFSServer).PinByCID(ctx, req.(*PinByCIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IPFS_ServiceDesc is the grpc.ServiceDesc for IPFS service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IPFS_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ipfs_plugin.IPFS",
	HandlerType: (*IPFSServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StoreOutput",
			Handler:    _IPFS_StoreOutput_Handler,
		},
		{
			MethodName: "PinByCID",
			Handler:    _IPFS_PinByCID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integrations/specs/data-persistence-api-spec/ipfs_plugin.proto",
}
