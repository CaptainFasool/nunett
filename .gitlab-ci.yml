variables: 
  # https://hub.docker.com/r/alpine/git/tags
  GIT_VERSION: v2.30.1
  BUILD_DISABLED: "yes"

include:
  project: nunet/nunet-infra
  file: ci/templates/Auto-DevOps.gitlab-ci.yml
  ref: develop

image: registry.gitlab.com/nunet/device-management-service/nunet-dms-builder:0.3

Build:
  stage: build
  script:
    - echo "Building debian archives..."
    - bash maint-scripts/build.sh
  only:
    refs:
      - $CI_DEFAULT_BRANCH
      - main
      - staging
      - develop
  artifacts:
    untracked: false
    when: on_success
    expire_in: "30 days"
    paths:
      - dist/

Deploy DMS:
  stage: deploy
  variables:
    CI_PARENT_PROJECT: dms
  trigger:
    forward:
      yaml_variables: true
      pipeline_variables: true
    project: nunet/nunet-infra
    branch: develop
  only:
    refs:
      - $CI_DEFAULT_BRANCH

.git:push:
  after_script:
    - cd "${CI_COMMIT_SHA}"

    - git checkout -B ${CI_COMMIT_BRANCH}
    
    - git add .
    
    - |-
      CHANGES=$(git status --porcelain | wc -l)

      if [ "$CHANGES" -gt "0" ]; then
        git status

        git commit -m "${COMMIT_MESSAGE}"

        git push -f origin "${CI_COMMIT_BRANCH}"  
      
      fi

  before_script:
    - git clone "https://${GITLAB_USERNAME}:${GITLAB_TOKEN}@${CI_SERVER_HOST}/nunet/open-api/device-management-api-spec" "${CI_COMMIT_SHA}"

    - git config --global user.email "${GIT_USER_EMAIL:-$GITLAB_USER_EMAIL}"
    - git config --global user.name "${GIT_USER_NAME:-$GITLAB_USER_NAME}"

  image:
    entrypoint: ['']
    name: alpine/git:${GIT_VERSION}

deploy:openapi:
  extends: .git:push
  stage: .pre
  script:
    - mv docs/swagger.json "${CI_COMMIT_SHA}"
    - mv docs/device-management-api-spec.yaml "${CI_COMMIT_SHA}"
  only:
    refs:
      - $CI_DEFAULT_BRANCH
      - main
      - staging


Deploy:
  stage: deploy
  variables:
     ANSIBLE_HOST_KEY_CHECKING: "false"
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client python3-apt -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - pip install ansible ansible-lint jmespath docker
    - ansible-galaxy role install geerlingguy.docker geerlingguy.pip
  image: python:3
  script: 
    - ansible --version
    - DMS_VERSION=$(cat main.go | grep @version | awk {'print $3'})
    - ansible-playbook -i $ANSIBLE_INVENTORY -e dms_version=$DMS_VERSION maint-scripts/deploy/playbook.yaml 
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "staging"

update_readme:
  image:
    entrypoint: ['']
    name: alpine/git:${GIT_VERSION}
  stage: .post
  script:
    - sed -i "s/badges\/.*\/coverage/badges\/$CI_COMMIT_BRANCH\/coverage/g" README.md
    - git config user.email $GITLAB_USER_EMAIL
    - git config user.name $GITLAB_USER_NAME
    # add must be used on first run per runner, on subsequent runs error is caught
    - git remote add gitlab_origin https://gitlab-ci-token:${GIT_CI_TOKEN}@gitlab.com/$CI_PROJECT_PATH.git || true
    - git remote set-url gitlab_origin https://gitlab-ci-token:${GIT_CI_TOKEN}@gitlab.com/$CI_PROJECT_PATH.git
    - git add README.md
    #  don't fail if no changes
    - git commit -m "push back from pipeline - README.md" || true
    # prevent triggering pipeline again
    - git push gitlab_origin HEAD:$CI_COMMIT_BRANCH -o ci.skip || true


Unit Tests Golang:
  stage: unit_tests
  image: golang:1.20
  allow_failure: true
  script:
    - echo "Running unit tests..."
    - apt update; apt install -y iproute2 bc jq libsystemd-dev
    - mkdir htmlcov
    # Remove below when upgrading to a newer go version (1.21) - go 1.20 has incorrect behavior with VCS stamping
    - go install -buildvcs=false
    - go install gotest.tools/gotestsum@latest
    - set +e +o pipefail
    - gotestsum --junitfile report.xml --format testname -- -coverprofile=coverage.txt -covermode count ./...
    - test_exit_code=$?
    - set +e -o pipefail
    - go get github.com/boumenot/gocover-cobertura
    - go run github.com/boumenot/gocover-cobertura < coverage.txt > coverage.xml
    - go tool cover -html coverage.txt -o htmlcov/index.html
    - echo "Test exit code is $test_exit_code"
    - exit $test_exit_code
    # - go tool cover -html=htmlcov/index.html
  # coverage: /\d+.\d+% of statements/
  coverage: '/coverage: \d+.\d+% of statements/'
  # coverage: /^coverage:\s(\d+(?:\.\d+)?%)/
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
